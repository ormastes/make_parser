import unittest
import io
from cmake_gen.CmakeGen import CMakeGen
from Common import LexerNode
from Types import LexerNodeType
from node.AssignNode import AssignNode
from node.IncludeNode import IncludeNode
from node.Node import Generator, NodeType, Node
from node.RootNode import RootNode
from node.TextNode import TextNode


class CMakeGenTests(unittest.TestCase):
    def setUp(self):
        # Set up test data
        self.src_dict = {
            "project1": "$(file1_cpp)",
            "project2": "$(file2_cpp)",
        }
        self.header_path_dict = {
            "project1": "$(include1)",
            "project2": "$(include2)"
        }
        self.lib_set = {"project1"}
        self.exe_set = {"project2"}

    def test_generate_pre_root(self):
        # Test generate_pre method for root node
        lex_node = LexerNode("project1", LexerNodeType.ROOT, None)
        node = RootNode("project1", [], lex_node)
        node.evaluate(node, {}, False, False)
        writer = io.StringIO()
        cmake_gen = CMakeGen(self.src_dict, self.header_path_dict, self.lib_set, self.exe_set)
        cmake_gen.generate_pre(node, writer)
        expected_output = "cmake_minimum_required(VERSION 3.28)\nproject(project1)\n# GENERATED BY CMAKE_GEN DO NOT EDIT HEADER-START\n"
        self.assertEqual(writer.getvalue(), expected_output)

    def test_generate_pre_assign(self):
        # Test generate_pre method for assign node
        lex_node = LexerNode("variable=value", LexerNodeType.ASSIGN, None)
        name = TextNode("variable", lex_node)
        value = TextNode("value", lex_node)
        node = AssignNode(name, value, lex_node)
        writer = io.StringIO()
        cmake_gen = CMakeGen(self.src_dict, self.header_path_dict, self.lib_set, self.exe_set)
        cmake_gen.generate_pre(node, writer)
        expected_output = "set(variable value)\n"
        self.assertEqual(writer.getvalue(), expected_output)

    def test_generate_pre_include(self):
        # Test generate_pre method for include node
        lexer_node = LexerNode("include_makefile.mk", LexerNodeType.INCLUDE, None)
        name = TextNode("include_makefile.mk", lexer_node)
        node = IncludeNode(name, lexer_node)
        writer = io.StringIO()
        cmake_gen = CMakeGen(self.src_dict, self.header_path_dict, self.lib_set, self.exe_set)
        cmake_gen.generate_pre(node, writer)
        expected_output = "include_directories(include_makefile.mk)\n"
        self.assertEqual(writer.getvalue(), expected_output)

    def test_generate_post_root(self):
        # Test generate_post method for root node
        lex_node = LexerNode("project1", LexerNodeType.ROOT, None)
        node = RootNode("project1", [], lex_node)
        node.evaluate(node, {}, False, False)
        writer = io.StringIO()
        cmake_gen = CMakeGen(self.src_dict, self.header_path_dict, self.lib_set, self.exe_set)
        cmake_gen.generate_post(node, writer)
        expected_output = ("# GENERATED BY CMAKE_GEN DO NOT EDIT HEADER-END\n# GENERATED BY CMAKE_GEN DO NOT EDIT FOOTER-START\n"
                           "add_library(project1 ${file1_cpp})\n"
                           "target_include_directories(project1 PUBLIC ${include1})\n"
                           "# GENERATED BY CMAKE_GEN DO NOT EDIT FOOTER-END\n")
        value = writer.getvalue()
        self.assertEqual(value, expected_output)

    def test_generate_post_lib(self):
        # Test generate_post method for library node
        lex_node = LexerNode("project1", LexerNodeType.ROOT, None)
        node = RootNode("project1", [], lex_node)
        writer = io.StringIO()
        cmake_gen = CMakeGen(self.src_dict, self.header_path_dict, self.lib_set, self.exe_set)
        cmake_gen.generate_post(node, writer)
        expected_output = (
            "# GENERATED BY CMAKE_GEN DO NOT EDIT HEADER-END\n# GENERATED BY CMAKE_GEN DO NOT EDIT FOOTER-START\n"
            "add_library(project1 ${file1_cpp})\n"
            "target_include_directories(project1 PUBLIC ${include1})\n"
            "# GENERATED BY CMAKE_GEN DO NOT EDIT FOOTER-END\n")
        self.assertEqual(writer.getvalue(), expected_output)

    def test_generate_post_exe(self):
        # Test generate_post method for executable node
        lex_node = LexerNode("project2", LexerNodeType.ROOT, None)
        node = RootNode("project2", [], lex_node)
        writer = io.StringIO()
        cmake_gen = CMakeGen(self.src_dict, self.header_path_dict, self.lib_set, self.exe_set)
        cmake_gen.generate_post(node, writer)
        expected_output = expected_output = (
            "# GENERATED BY CMAKE_GEN DO NOT EDIT HEADER-END\n# GENERATED BY CMAKE_GEN DO NOT EDIT FOOTER-START\n"
            "add_executable(project2 ${file2_cpp})\n"
            "target_include_directories(project2 PUBLIC ${include2})\n"
            "# GENERATED BY CMAKE_GEN DO NOT EDIT FOOTER-END\n")
        self.assertEqual(writer.getvalue(), expected_output)

if __name__ == '__main__':
    unittest.main()