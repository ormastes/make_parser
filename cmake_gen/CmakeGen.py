from node.Node import Generator, NodeType, Node
from Common import CommonProcessor, LexerNode
from Types import LexerNodeType
from node.AssignNode import AssignNode
from node.DefineNode import DefineNode
from node.ExportNode import ExportNode
from node.ExpressionNode import ExpressionNode
from node.FunctionNode import FunctionNode
from node.IfNode import IfNode
from node.IncludeNode import IncludeNode
from node.RootNode import RootNode
from node.RuleNode import RuleNode
from node.UndefineNode import UndefineNode
from node.TextNode import TextNode
from node.StatementsNode import StatementsNode


class CMakeGen(Generator):
    """
    A class for generating CMake files based on a given AST (Abstract Syntax Tree).

    Args:
        src_dict (dict): A dictionary mapping project names to source file lists.
        header_path_dict (dict): A dictionary mapping project names to header path lists.
        lib_set (set): A set of library names.
        exe_set (set): A set of executable names.
    """

    def __init__(self, src_dict, header_path_dict, lib_set, exe_set):
        self.src_dict = src_dict
        self.header_path_dict = header_path_dict
        self.lib_set = lib_set
        self.exe_set = exe_set
        self.new_file = True

    def set_new_file(self, new_file):
        """
        Set whether the next node is the first node in a new file.

        Args:
            new_file (bool): Whether the next node is the first node in a new file.
        """
        self.new_file = new_file

    def get_version(self, node):
        """
        Get the version of a given node.

        Args:
            node: The node to get the version from.

        Returns:
            str: The version of the node.
        """
        return "3.28"


    def replace_variales(self, node):
        """
        Replace the variables in a given node.

        Args:
            node: The node to replace the variables in.

        Returns:
            None
        """
        text = str(node)
        if '$(' in text:
            text = text.replace('$(', '${')
            text = text.replace(')', '}')
        return text

    def generate_pre(self, node, writer):
        """
        Generate the pre-build section of the CMake file based on the given node.

        Args:
            node: The node to generate the pre-build section for.
            writer: The writer object to write the generated code to.
        """

        if self.new_file and node.type == NodeType.ROOT:
            writer.write("cmake_minimum_required(VERSION {})\n".format(self.get_version(node)))
            writer.write("project({})\n".format(node.get_name()))
            writer.write("# GENERATED BY CMAKE_GEN DO NOT EDIT HEADER-START\n")
        elif node.type == NodeType.ASSIGN:
            writer.write("set("+self.replace_variales(node.get_name())+" "+self.replace_variales(node.value)+")\n")
        elif node.type == NodeType.INCLUDE:
            writer.write("include_directories("+self.replace_variales(node.get_name())+")\n")
        else:
            pass

    def generate_post(self, node, writer):
        """
        Generate the post-build section of the CMake file based on the given node.

        Args:
            node: The node to generate the post-build section for.
            writer: The writer object to write the generated code to.
        """
        if node.type == NodeType.ROOT:
            if self.new_file:
                writer.write("# GENERATED BY CMAKE_GEN DO NOT EDIT HEADER-END\n")
                writer.write("# GENERATED BY CMAKE_GEN DO NOT EDIT FOOTER-START\n")
            if node.get_name() in self.lib_set:
                writer.write("add_library("+self.replace_variales(node.get_name())+ ' ' +self.replace_variales(self.src_dict[node.get_name()])+ ')\n')
            elif node.get_name() in self.exe_set:
                writer.write("add_executable(" + self.replace_variales(node.get_name()) + ' ' + self.replace_variales(self.src_dict[node.get_name()]) + ')\n')
            else:
                pass

            writer.write("target_include_directories(" + self.replace_variales(node.get_name()) + " PUBLIC " + self.replace_variales(self.header_path_dict[node.get_name()]) + ")\n")
            if self.new_file:
                writer.write("# GENERATED BY CMAKE_GEN DO NOT EDIT FOOTER-END\n")
